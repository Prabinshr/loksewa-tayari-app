generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectName         = "Loksewa Server"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "By Nep Tech Pal Pvt. Ltd."
}

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src"
//   outputToNestJsResourceStructure = "true"
//   exportRelationModifierClasses   = true
//   reExport                        = "true"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   annotateAllDtoProperties        = "true"
//   dtoSuffix                       = "Dto"
//   classValidation                 = "true"
//   outputType                      = "class"
//   prettier                        = "true"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  SUBSCRIBED_USER
  USER
}

enum OnlineStatus {
  ONLINE
  OFFLINE
}

model User {
  id           String            @id @default(cuid())
  username     String            @unique
  first_name   String
  middle_name  String?
  last_name    String
  onlineStatus OnlineStatus?     @default(OFFLINE)
  /// @DtoEntityHidden
  password     String
  email        String            @unique
  verified     Boolean?          @default(false)
  /// @DtoCreateOptional
  role         Role?             @default(USER)
  /// @DtoCreateOptional
  /// @DtoReadOnly
  createdAt    DateTime          @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt    DateTime          @updatedAt @map("updated_at")
  /// @DtoCreateOptional
  transactions Transaction[]
  /// @DtoCreateOptional
  progress     User_Progress[]
  otps         OTP[]
  hash         refreshTokenHash?

  posts   Post[]
  comment Comments[]
}

model ResetPassword {
  email String @unique

  pass_reset_token         BigInt
  pass_reset_token_expires BigInt
}

model refreshTokenHash {
  id         String @id @default(cuid())
  user_id    String @unique
  user       User   @relation(fields: [user_id], references: [id])
  token_hash String
}

model Quiz_Category {
  id        String   @id @default(cuid())
  name      String
  /// @DtoReadOnly
  createdAt DateTime @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt @map("updated_at")
  /// @DtoCreateOptional
  quizzes   Quiz[]
}

model Quiz {
  id                  String          @id @default(cuid())
  name                String
  category_id         String
  /// @DtoCreateOptional
  cost                Float           @default(0)
  /// @DtoCreateOptional
  negative_mark_value Float?          @default(0)
  /// @DtoReadOnly
  createdAt           DateTime        @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt           DateTime        @updatedAt @map("updated_at")
  Question            Question[]
  /// @DtoCreateOptional
  category            Quiz_Category?  @relation(fields: [category_id], references: [id])
  /// @DtoCreateOptional
  Transaction         Transaction[]
  /// @DtoCreateOptional
  User_Progress       User_Progress[]
}

model Question_Category {
  id        String     @id @default(cuid())
  name      String
  /// @DtoReadOnly
  createdAt DateTime   @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt DateTime   @updatedAt @map("updated_at")
  /// @DtoCreateOptional
  quizzes   Question[]
}

model Question {
  id                  String             @id @default(cuid())
  quiz_id             String?
  text                String
  correct_answer      String
  /// @DtoCreateOptional
  answer_explanation  String?
  /// @DtoReadOnly
  createdAt           DateTime           @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt           DateTime           @updatedAt @map("updated_at")
  /// @ArrayNotEmpty
  options             String[]
  /// @DtoCreateOptional
  quiz                Quiz?              @relation(fields: [quiz_id], references: [id])
  Question_Category   Question_Category? @relation(fields: [question_CategoryId], references: [id])
  question_CategoryId String?

  qsn_set_id  String
  questionSet QuestionSet @relation(fields: [qsn_set_id], references: [id])
}

model User_Progress {
  id             String   @id @default(cuid())
  user_id        String
  quiz_id        String
  score          Int
  negative_score Float
  /// @DtoReadOnly
  createdAt      DateTime @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt      DateTime @updatedAt @map("updated_at")
  quiz           Quiz     @relation(fields: [quiz_id], references: [id])
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Transaction {
  id               String   @id @default(cuid())
  user_id          String
  quiz_id          String
  amount           Int
  transaction_date DateTime
  /// @DtoReadOnly
  createdAt        DateTime @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt        DateTime @updatedAt @map("updated_at")
  quiz             Quiz     @relation(fields: [quiz_id], references: [id])
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum OTPType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  OTHER
}

model OTP {
  id        String   @id @default(cuid())
  type      OTPType
  code      String
  user_id   String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model SewaService {
  id          String       @id @default(cuid())
  description String
  status      STATUS
  image       String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt()
  subServices SubService[]
}

enum STATUS {
  PUBLISHED
  UNPUBLISHED
}

model SubService {
  id             String      @id @default(cuid())
  sewaService_id String
  service        SewaService @relation(fields: [sewaService_id], references: [id])
  title          String
  description    String?
  image          String?
  status         STATUS

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  subserviceHasSyllabus SubserviceHasSyllabus[]
}

model SubserviceHasSyllabus {
  service_id                String                @id
  syllabus_sub_structure_id String
  syllabusSubStructure      SyllabusSubStructure? @relation(fields: [syllabus_sub_structure_id], references: [id])
  subService                SubService?           @relation(fields: [service_id], references: [id])
}

model SyllabusStructure {
  id                    String                 @id @default(cuid())
  title                 String
  description           String?
  image                 String?
  syllabusSubStructures SyllabusSubStructure[]
}

model SyllabusSubStructure {
  id String @id @default(cuid())

  syllabus_structure_id String
  syllabusStructure     SyllabusStructure @relation(fields: [syllabus_structure_id], references: [id])

  title       String
  description String?
  image       String?

  subserviceHasSyllabus SubserviceHasSyllabus[]
  subStrTopics          SubStrTopic[]
}

model SubStrTopic {
  id                  String  @id @default(cuid())
  sub_struct_topic_id String
  title               String
  description         String?
  image               String?

  syllabusSubStructure SyllabusSubStructure @relation(fields: [sub_struct_topic_id], references: [id])
  questionSets         QuestionSet[]
}

model QuestionSet {
  id   String   @id @default(cuid())
  type QSN_TYPE

  topic_id    String
  subStrTopic SubStrTopic @relation(fields: [topic_id], references: [id])
  title       String
  description String?
  questions   Question[]
}

model Forum {
  id    String @id @default(cuid())
  title String
  posts Post[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Post {
  id       String     @id @default(cuid())
  content  String
  comments Comments[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Forum     Forum    @relation(fields: [forumId], references: [id])
  forumId   String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Comments {
  id      String @id @default(cuid())
  content String

  userId    String
  postId    String

  User      User     @relation(fields: [userId], references: [id])
  Post      Post[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum QSN_TYPE {
  PAID
  FREE
  TRIAL
}
